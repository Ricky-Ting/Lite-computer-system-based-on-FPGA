DEPTH         = 64;   % Memory depth and width are required          %
WIDTH         = 32;   % Enter a decimal number                       %
ADDRESS_RADIX = HEX;  % Address and value radixes are optional       %
DATA_RADIX    = HEX;  % Enter BIN,DEC,HEX,or OCT; unless             %
                      % otherwise specified,radixes = HEX            %
CONTENT
BEGIN
[0..1F]:00000000;        % Range--Every address from 0 to 1F = 00000000         %
 0:3c010000; % (00)main:     lui  r1, 0            #address of data[0]           %
 1:34240050; % (04)          ori  r4,r1,80         #address of data[0]           %
 2:0c00001b; % (08)call:     jal  sum              #call function                %
 3:20050004; % (0c)dslot1:  addi  r5,r0,4          #counter,DELAYED SLOT(DS)     %
 4:ac820000; % (10)return:   sw   r2,0(r4)         #store result                 %
 5:8c890000; % (14)          lw   r9,0(r4)         #check sw                     %
 6:01244022; % (18)          sub  r8,r9,r4         #sub:r8 <-- r9 - r4           %
 7:20050003; % (1c)          addi r5,r0,3          #counter                      %
 8:20a5ffff; % (20) loop2    addi r5,r5,-1         #counter - 1                  %
 9:34a8ffff; % (24)          ori  r8,r5,0xffff     #zero-extend:0000ffff         %
 A:39085555; % (28)         xori  r8,r8,0x5555     #zero-extend:0000aaaa         %
 B:2009ffff; % (2c)         addi  r9,r0,-1         #sign-extend:ffffffff         %
 C:312affff; % (30)         andi  r10,r9,0xffff    #zero-extend:0000ffff         %
 D:01493025; % (34)          or   r6,r10,r9        #or:ffffffff                  %
 E:01494026; % (38)         xor   r8,r10,r9        #xor:ffff0000                 %
 F:01463824; % (3c)         and   r7,r10,r6        #and:0000ffff                 %
10:10a00003; % (40)         beq   r5,r0,shift      #if r5 = 0, goto shift        %
11:00000000; % (44)dslot2:  nop                    #DS                           %
12:08000008; % (48)         j     loop2            #jump loop2                   %
13:00000000; % (4c)dslot3:  nop                    #DS                           %
14:2005ffff; % (50)shift    addi  r5,r0,-1         #r5   = ffffffff              %
15:000543c0; % (54)         sll   r8,r5,15         #<<15 = ffff8000              %
16:00084400; % (58)         sll   r8,r8,16         #<<16 = 80000000              %
17:00084403; % (5c)         sra   r8,r8,16         #>>16 = ffff8000(arith)       %
18:000843c2; % (60)         srl   r8,r8,15         #>>15 = 0001ffff(logic)       %
19:08000019; % (64)finish:  j     finish           #dead loop                    %
1A:00000000; % (68)dslot4:  nop                    #DS                           %
1B:00004020; % (6c)sum:     add   r8,r0,r0         #sum                          %
1C:8c890000; % (70)loop:    lw    r9,0(r4)         #load data                    %
1D:01094020; % (74)         add   r8,r8,r9         #sum                          %
1E:20a5ffff; % (78)         addi  r5,r5,-1         #counter -1                   %
1F:14a0fffc; % (7c)         bne   r5,r0,loop       #finish?                      %
20:20840004; % (80) dslot5: addi  r4,r4,4          #address + 4, DS              %
21:03e00008; % (84)         jr    r31              #return                       %
22:00081000; % (88) dslot6: sll   r2,r8,0          #move result to v0,DS         %
END;