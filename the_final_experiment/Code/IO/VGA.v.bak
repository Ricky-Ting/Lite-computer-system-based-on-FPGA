module IO_System(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// Seg7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS,

	//////////// PS2 //////////
	inout 		          		PS2_CLK,
	inout 		          		PS2_CLK2,
	inout 		          		PS2_DAT,
	inout 		          		PS2_DAT2
);
	
	//VGA部分
	wire [4:0] c_h;
	wire [6:0] c_v;
	wire [7:0] c_a;
	wire [255:0] f_a;
	wire [3:0] f_h;
	wire [3:0] f_v;
	wire point;
		
	wire [18:0] Addr;
	wire [18:0] addr;
	wire [11:0] color;
	
	reg [4:0] offset;
	
	initial
	begin
		s_data = 12'd2070;
		offset = 30;
	end
	
	assign LEDR[9:5] = offset;
	//字模读取部分
	assign addr[18:9] = Addr[18:9]+10'h2;
	assign addr[8:0] = Addr[8:0]-9'h1;
	
	assign c_h = (addr[8:4] + offset)%30;
	Line L(addr[18:9], VGA_CLK, {term[0], c_v, f_v});
	Screen_table ({c_h, c_v}, {k_h, k_v}, VGA_CLK, CLOCK_50, ,s_data,1'b0,1'b1,c_a, );
	Font F(c_a, VGA_CLK, f_a);
	assign f_h = addr[3:0];
	assign point = f_a[{4'hf-f_h, f_v}];
	
	//图片选择部分
	
	
	
	//最终处理部分
	assign color = {12{point}};
	
	Screen Sc(SW, CLOCK_50, VGA_R, VGA_G, VGA_B, VGA_CLK, VGA_SYNC_N, VGA_BLANK_N, VGA_VS, VGA_HS, Addr, color);
endmodule
