module Sound(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// Seg7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// Audio //////////
	input 		          		AUD_ADCDAT,
	inout 		          		AUD_ADCLRCK,
	inout 		          		AUD_BCLK,
	output		          		AUD_DACDAT,
	inout 		          		AUD_DACLRCK,
	output		          		AUD_XCK,

	//////////// PS2 //////////
	inout 		          		PS2_CLK,
	inout 		          		PS2_CLK2,
	inout 		          		PS2_DAT,
	inout 		          		PS2_DAT2,

	//////////// I2C for Audio and Video-In //////////
	output		          		FPGA_I2C_SCLK,
	inout 		          		FPGA_I2C_SDAT,
	
	//////////// Keyboard //////////

	input ps2_clk,
	input ps2_data
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

wire clk_i2c;
wire reset;
/*
wire [15:0] audiodata0;
wire [15:0] audiodata1;
wire [15:0] audiodata2;
wire [15:0] audiodata3;
*/
wire [15:0] audiodata;
wire [15:0] audiodata1;
/*
wire [15:0] sound0;
wire [15:0] sound1;
wire [15:0] sound2;
wire [15:0] sound3;
*/
wire [15:0] sound;
wire [15:0] sound1;
reg [15:0] volume_sound;

wire [7:0] ascll;

reg [7:0] ascllt;
reg [1:0] div1;
reg sign;

	

//=======================================================
//  Structural coding
//=======================================================

assign reset = ~KEY[0];

audio_clk u1(CLOCK_50, reset,AUD_XCK, LEDR[9]);


//I2C part
clkgen #(10000) my_i2c_clk(CLOCK_50,reset,1'b1,clk_i2c);  //10k I2C clock  


I2C_Audio_Config myconfig(clk_i2c, KEY[0],FPGA_I2C_SCLK,FPGA_I2C_SDAT,LEDR[2:0]);

I2S_Audio myaudio(AUD_XCK, KEY[0], AUD_BCLK, AUD_DACDAT, AUD_DACLRCK, volume_sound[15:0]);

Sin_Generator sin_wave(AUD_DACLRCK, KEY[0], sound, audiodata);
Sin_Generator sin_wave1(AUD_DACLRCK, KEY[0], sound1, audiodata1);
//Sin_Generator sin_wave0(AUD_DACLRCK, ~KEY[0], sound0, audiodata0);//
//Sin_Generator sin_wave1(AUD_DACLRCK, ~KEY[1], sound1, audiodata1);//
//Sin_Generator sin_wave2(AUD_DACLRCK, ~KEY[2], sound2, audiodata2);//
//Sin_Generator sin_wave3(AUD_DACLRCK, ~KEY[3], sound3, audiodata3);//

piano P(ascll, CLOCK_50, sound);
piano P1(ascllt, CLOCK_50, sound1);
//piano P0(SW[5:0]+0, CLOCK_50, sound0);
//piano P1(SW[5:0]+1, CLOCK_50, sound1);
//piano P2(SW[5:0]+2, CLOCK_50, sound2);
//piano P3(SW[5:0]+3, CLOCK_50, sound3);

Keyboard K(CLOCK_50, PS2_CLK, PS2_DAT, HEX0, HEX1, HEX2, HEX3, ascll, LEDR[5:3]);
/*
assign audiodata = audiodata0/((~KEY[0])+(~KEY[1])+(~KEY[2])+(~KEY[3]))
						+audiodata1/((~KEY[0])+(~KEY[1])+(~KEY[2])+(~KEY[3]))
						+audiodata2/((~KEY[0])+(~KEY[1])+(~KEY[2])+(~KEY[3]))
						+audiodata3/((~KEY[0])+(~KEY[1])+(~KEY[2])+(~KEY[3]));
*/
//assign audiodata = ({2'b00, audiodata0} + {2'b00, audiodata1} + {2'b00, audiodata2} + {2'b00, audiodata3})/({16'b0, (~KEY[0])}+{16'b0, (~KEY[1])}+{16'b0, (~KEY[2])}+{16'b0, (~KEY[3])});
//assign volume_sound = ($signed(audiodata[15:0])) >>> SW[8:6];
//assign volume_sound = $signed(audiodata[15:0]) >>> SW[8:6];
//$signed(audiodata[15:0])/div1 + {audiodata1[15], audiodata1[15:1]}*sign)
//sign*({audiodata[15], audiodata[15:1]}+{audiodata1[15], audiodata1[15:1]}) + ((sign+1)%2)*audiodata[15:0] 
	always@(posedge CLOCK_50)
	begin
		if(LEDR[5:3] == 0)
		begin
			volume_sound <= 0;
			//ascllt <= ascll;
		end
		if(LEDR[5:3] == 1)
		begin
			if(audiodata != 0)
				ascllt <= ascll;
			volume_sound <= $signed(audiodata[15:0]) >>> SW[8:6];
		end
		if(LEDR[5:3] == 3)
		begin
			volume_sound <= $signed({audiodata[15], audiodata[15:1]}+{audiodata1[15], audiodata1[15:1]}) >>> SW[8:6];
		end
	end

endmodule
